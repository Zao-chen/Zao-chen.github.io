<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Qt如何给程序添加系统托盘</title>
    <link href="/2024/11/19/Qt%E5%A6%82%E4%BD%95%E7%BB%99%E7%A8%8B%E5%BA%8F%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E6%89%98%E7%9B%98/"/>
    <url>/2024/11/19/Qt%E5%A6%82%E4%BD%95%E7%BB%99%E7%A8%8B%E5%BA%8F%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E6%89%98%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<p>介绍一下如何给Qt程序做一个系统托盘</p><span id="more"></span><h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><p><img src="/../img/image-20241119194056367.png" alt="image-20241119194056367"></p><h1 id="开始制作"><a href="#开始制作" class="headerlink" title="开始制作"></a>开始制作</h1><h2 id="添加托盘"><a href="#添加托盘" class="headerlink" title="添加托盘"></a>添加托盘</h2><p>使用到了QSystemTrayIcon类，首先要在.h的private中创建一个：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">QSystemTrayIcon *m_sysTrayIcon; <span class="hljs-comment">//系统托盘</span><br></code></pre></td></tr></table></figure><p>然后在cpp中实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">m_sysTrayIcon = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QSystemTrayIcon</span>(<span class="hljs-keyword">this</span>); <span class="hljs-comment">//新建QSystemTrayIcon对象</span><br>QIcon icon = <span class="hljs-built_in">QIcon</span>(<span class="hljs-string">&quot;:/img/img/logo.png&quot;</span>); <span class="hljs-comment">//资源文件添加的图标</span><br>m_sysTrayIcon-&gt;<span class="hljs-built_in">setIcon</span>(icon);<br></code></pre></td></tr></table></figure><p>这里设置图标要检查一下，如果设置失败的话不会报错，也不会显示托盘</p><p>接着，就可以给托盘图标添加事件了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">connect</span>(m_sysTrayIcon, &amp;QSystemTrayIcon::activated, <span class="hljs-comment">//给QSystemTrayIcon添加槽函数</span><br>        [=](QSystemTrayIcon::ActivationReason reason)<br>        &#123;<br>            <span class="hljs-keyword">switch</span>(reason)<br>            &#123;<br>            <span class="hljs-keyword">case</span> QSystemTrayIcon::Trigger: <span class="hljs-comment">//单击托盘图标</span><br>                <span class="hljs-comment">//单击事件</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> QSystemTrayIcon::DoubleClick: <span class="hljs-comment">//双击托盘图标</span><br>                <span class="hljs-comment">//双击事件</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure><h2 id="添加托盘菜单"><a href="#添加托盘菜单" class="headerlink" title="添加托盘菜单"></a>添加托盘菜单</h2><p>也就是右击托盘图标会显示的菜单，使用到了QMenu，先.h中创建：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">QMenu *m_menu; <span class="hljs-comment">//菜单</span><br></code></pre></td></tr></table></figure><p>然后再cpp中实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">m_menu = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QMenu</span>(<span class="hljs-keyword">this</span>);<br>m_sysTrayIcon-&gt;<span class="hljs-built_in">setContextMenu</span>(m_menu); <span class="hljs-comment">//把QMenu赋给QSystemTrayIcon对象</span><br></code></pre></td></tr></table></figure><h2 id="添加菜单项"><a href="#添加菜单项" class="headerlink" title="添加菜单项"></a>添加菜单项</h2><p>我们有了菜单，但是菜单里没东西是不行的，使用QAction来添加动作，这里做一个显示主界面和退出程序的示例。</p><p>还是一样.h中添加：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">QAction *m_showMainAction; <span class="hljs-comment">//显示主界面</span><br>QAction *m_exitAppAction; <span class="hljs-comment">//退出程序</span><br></code></pre></td></tr></table></figure><p>然后在上面的QMenu赋值到Icon前，加入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">m_showMainAction = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QAction</span>(<span class="hljs-string">&quot;主界面&quot;</span>, <span class="hljs-keyword">this</span>);<br>m_exitAppAction = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QAction</span>(<span class="hljs-string">&quot;退出&quot;</span>, <span class="hljs-keyword">this</span>);<br>m_menu-&gt;<span class="hljs-built_in">addAction</span>(m_showMainAction); <span class="hljs-comment">//新增菜单项---显示主界面</span><br>m_menu-&gt;<span class="hljs-built_in">addAction</span>(m_exitAppAction); <span class="hljs-comment">//新增菜单项---退出程序</span><br></code></pre></td></tr></table></figure><p>当然我们有了按钮还不行，还要给按钮添加事件</p><p>private slots中添加：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_showMainAction</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//打开主界面</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">on_exitAppAction</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//退出程序</span><br></code></pre></td></tr></table></figure><p>记得实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//托盘主界面</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MainWindow::on_showMainAction</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">show</span>();<br>&#125;<br><span class="hljs-comment">//托盘推出</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MainWindow::on_exitAppAction</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    qApp-&gt;<span class="hljs-built_in">exit</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>当然，还要连接一下信号和槽</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">connect</span>(m_showMainAction,<span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">triggered</span>()),<span class="hljs-keyword">this</span>,<span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">on_showMainAction</span>()));<br><span class="hljs-built_in">connect</span>(m_exitAppAction,<span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">triggered</span>()),<span class="hljs-keyword">this</span>,<span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">on_exitAppAction</span>()));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漫画如何嵌网点背景的对话框</title>
    <link href="/2024/11/07/%E6%BC%AB%E7%94%BB%E5%A6%82%E4%BD%95%E5%B5%8C%E7%BD%91%E7%82%B9%E8%83%8C%E6%99%AF%E7%9A%84%E5%AF%B9%E8%AF%9D%E6%A1%86/"/>
    <url>/2024/11/07/%E6%BC%AB%E7%94%BB%E5%A6%82%E4%BD%95%E5%B5%8C%E7%BD%91%E7%82%B9%E8%83%8C%E6%99%AF%E7%9A%84%E5%AF%B9%E8%AF%9D%E6%A1%86/</url>
    
    <content type="html"><![CDATA[<p>漫画嵌字中网点的对话框的处理</p><span id="more"></span><p>这个系列会记录一下嵌字的个人经验，如果有更好的方法可以评论区分享。</p><h1 id="问题介绍"><a href="#问题介绍" class="headerlink" title="问题介绍"></a>问题介绍</h1><p>在嵌字中我们会遇到这样的对话框</p><p><img src="/../img/image-20241107200053080.png" alt="image-20241107200053080"></p><p>对于这种对话框，我们应该如何处理呢？</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="方法1-使用仿制图章"><a href="#方法1-使用仿制图章" class="headerlink" title="方法1 使用仿制图章"></a>方法1 使用仿制图章</h2><ul><li>优点：方便快捷、和对原图破坏低</li><li>缺点：部分情况无法使用</li></ul><p>先在网点中找到重复区域，用距文字远的按住alt取基准点，移动到左边的区块直到完全重合。</p><p><img src="/../img/image-20241107200413889.png" alt="image-20241107200413889"></p><p>刚开始不熟练的时候可以把图章硬度调低，没对上的话会像下图一样雾蒙蒙的。</p><p><img src="/../img/image-20241107200825398.png" alt="image-20241107200825398"></p><p>对上的话会是非常完美的，非常明显。然后就是往文字上涂了。</p><p><img src="/../img/image-20241107201020327.png" alt="image-20241107201020327"></p><p>对于这种留空比较大的还行，但是如果遇到留空比较小的，比如下图就非常难涂了，这个时候就要把网点重做。</p><p><img src="/../img/image-20241107201137995.png" alt="image-20241107201137995"></p><h2 id="方法2-网点重做"><a href="#方法2-网点重做" class="headerlink" title="方法2 网点重做"></a>方法2 网点重做</h2><ul><li>优点：通用性强，适合覆盖区域大的文本框</li><li>缺点：比较费时</li></ul><p>所谓网点重做，就是自己重新画网点上去。</p><p>首先，我们要先搞到网点素材，你可以先找到一片网点比较大的区域并选取重复的区域：</p><p><img src="/../img/image-20241107201737812.png" alt="image-20241107201737812"></p><p>可以看到，左上角和右下角的区块是明显重复的，把重复的整个区块（上图粉色的）选中，复制拼接到左右，发现是无缝拼接的，这就是找到了重复区块，整个就可以当作网点素材添加到图案。</p><p><img src="/../img/image-20241107201914824.png" alt="image-20241107201914824"></p><p>有了素材后，我们就可以进行重做网点了，先框选对话框，可以用自己喜欢的方式，区域画笔、快速选择、框选都是可以的。我比较喜欢快速选择+区域画笔微调：</p><p><img src="/../img/image-20241107202041415.png" alt="image-20241107202041415"></p><p>接着就可以进行图案填充了，当然你愿意用图章画也是可以的</p><p><img src="/../img/image-20241107202208912.png" alt="image-20241107202208912"></p><p><img src="/../img/image-20241107202414428.png" alt="image-20241107202414428"></p><h2 id="方法3-网点素材-仿制图章"><a href="#方法3-网点素材-仿制图章" class="headerlink" title="方法3 网点素材+仿制图章"></a>方法3 网点素材+仿制图章</h2><p>其实就是两者的结合，把素材放在旁边，然后用仿制图章盖上去，这样子可以最大限度减少对原图的破坏</p><p><img src="/../img/image-20241107202536923.png" alt="image-20241107202536923"></p>]]></content>
    
    
    
    <tags>
      
      <tag>漫画嵌字</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Qt6中截取视频帧图片</title>
    <link href="/2024/11/04/%E5%9C%A8Qt%E4%B8%AD%E6%88%AA%E5%8F%96%E8%A7%86%E9%A2%91%E5%B8%A7%E5%9B%BE%E7%89%87/"/>
    <url>/2024/11/04/%E5%9C%A8Qt%E4%B8%AD%E6%88%AA%E5%8F%96%E8%A7%86%E9%A2%91%E5%B8%A7%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p>导入一个视频文件并截取某一帧</p><span id="more"></span><h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><p>Qt 6的Qt Multimedia模块替换了Qt 5.x的Qt Multimedia模块。使用Qt 5的Qt Multimedia的现有代码可以通过有限的努力进行移植。</p><p>也就是可以用QVideoSink来获取视频单帧了</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>引入Multimedia</p><p>CMake示例：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">find_package</span>(Qt<span class="hljs-variable">$&#123;QT_VERSION_MAJOR&#125;</span> REQUIRED COMPONENTS Widgets Multimedia)<br><span class="hljs-keyword">target_link_libraries</span>(QtTest PRIVATE Qt<span class="hljs-variable">$&#123;QT_VERSION_MAJOR&#125;</span>::Widgets Qt6::Multimedia)<br></code></pre></td></tr></table></figure><p>需要引用的头文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QMediaPlayer&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QVideoSink&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QVideoFrame&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h1><h2 id="获取单帧"><a href="#获取单帧" class="headerlink" title="获取单帧"></a>获取单帧</h2><p>.h private添加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">QMediaPlayer* m_player = <span class="hljs-literal">nullptr</span>;<br></code></pre></td></tr></table></figure><p>.cpp使用样例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mainwindow.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;./ui_mainwindow.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QFileDialog&gt;</span></span><br><br>MainWindow::<span class="hljs-built_in">MainWindow</span>(QWidget *parent)<br>    : <span class="hljs-built_in">QMainWindow</span>(parent)<br>    , <span class="hljs-built_in">ui</span>(<span class="hljs-keyword">new</span> Ui::MainWindow)<br>&#123;<br>    ui-&gt;<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br>    m_player = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QMediaPlayer</span>(<span class="hljs-keyword">this</span>);<br>&#125;<br>MainWindow::~<span class="hljs-built_in">MainWindow</span>()<br>&#123;<br>    <span class="hljs-keyword">delete</span> ui;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MainWindow::on_pushButton_clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    QVideoSink* videoSink = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QVideoSink</span>(<span class="hljs-keyword">this</span>);<br>    m_player-&gt;<span class="hljs-built_in">setVideoOutput</span>(videoSink);<br>    <span class="hljs-comment">//加载视频文件</span><br>    QString str = QFileDialog::<span class="hljs-built_in">getOpenFileName</span>();<br>    m_player-&gt;<span class="hljs-built_in">setSource</span>(<span class="hljs-built_in">QUrl</span>(str));<br>    <span class="hljs-comment">//连接 QVideoSink 的 videoFrameChanged 信号</span><br>    <span class="hljs-built_in">connect</span>(videoSink, &amp;QVideoSink::videoFrameChanged, [&amp;](<span class="hljs-type">const</span> QVideoFrame &amp;frame) &#123;<br>        <span class="hljs-comment">//获取帧时间戳</span><br>            m_player-&gt;<span class="hljs-built_in">setPosition</span>(<span class="hljs-number">5000</span>);<br>            QImage image = frame.<span class="hljs-built_in">toImage</span>(); <span class="hljs-comment">//将 QVideoFrame 转换为 QImage</span><br>            image.<span class="hljs-built_in">save</span>(<span class="hljs-string">&quot;screenshot_at_5_seconds.png&quot;</span>); <span class="hljs-comment">//保存图片</span><br>            m_player-&gt;<span class="hljs-built_in">stop</span>(); <span class="hljs-comment">// 停止播放</span><br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">// 开始播放视频</span><br>    m_player-&gt;<span class="hljs-built_in">play</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="获取多帧"><a href="#获取多帧" class="headerlink" title="获取多帧"></a>获取多帧</h2><p>.h中添加loop</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">QEventLoop loop;<br></code></pre></td></tr></table></figure><p>如果需要循环获取，可以使用loop进行局部循环</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//循环七秒</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= m_player-&gt;<span class="hljs-built_in">duration</span>(); i += <span class="hljs-number">7000</span>)<br>&#123;<br>    m_player-&gt;<span class="hljs-built_in">setPosition</span>(i);<br>    <span class="hljs-comment">//使用局部事件循环等待帧捕获</span><br>    <span class="hljs-type">bool</span> frameCaptured = <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">//连接视频帧捕获的信号</span><br>    <span class="hljs-built_in">connect</span>(videoSink, &amp;QVideoSink::videoFrameChanged, <span class="hljs-keyword">this</span>, [&amp;](<span class="hljs-type">const</span> QVideoFrame &amp;frame) <span class="hljs-keyword">mutable</span> &#123;<br>        <span class="hljs-keyword">if</span> (!frameCaptured &amp;&amp; frame.<span class="hljs-built_in">isValid</span>()) &#123;<br>            frameCaptured = <span class="hljs-literal">true</span>; <span class="hljs-comment">//第一次捕获后设置为 true</span><br>            QImage image = frame.<span class="hljs-built_in">toImage</span>();<br>            ui-&gt;label-&gt;<span class="hljs-built_in">setPixmap</span>(QPixmap::<span class="hljs-built_in">fromImage</span>(image));<br>            <span class="hljs-keyword">if</span> (!image.<span class="hljs-built_in">isNull</span>()) &#123;<br>                <span class="hljs-comment">//保存图像为 jpg</span><br>                image.<span class="hljs-built_in">save</span>(QString::<span class="hljs-built_in">number</span>(i) + <span class="hljs-string">&quot;.jpg&quot;</span>, <span class="hljs-string">&quot;JPG&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">//断开信号，停止等待</span><br>            <span class="hljs-built_in">disconnect</span>(videoSink, &amp;QVideoSink::videoFrameChanged, <span class="hljs-keyword">this</span>, <span class="hljs-literal">nullptr</span>);<br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">//开启局部事件循环，等待帧捕获完成</span><br>    loop.<span class="hljs-built_in">exec</span>();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Qt中使用http的get和post请求</title>
    <link href="/2024/10/28/%E5%9C%A8Qt%E4%B8%AD%E4%BD%BF%E7%94%A8get%E5%92%8Cpost%E8%AF%B7%E6%B1%82/"/>
    <url>/2024/10/28/%E5%9C%A8Qt%E4%B8%AD%E4%BD%BF%E7%94%A8get%E5%92%8Cpost%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<p>如何在Qt中发送get和post请求</p><span id="more"></span><h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><p>超文本传输协议（HTTP）的设计目的是保证客户端与服务器之间的通信。</p><p>HTTP 的工作方式是客户端与服务器之间的请求-应答协议。</p><p>web 浏览器可能是客户端，而计算机上的网络应用程序也可能作为服务器端。</p><p>举例：客户端（浏览器）向服务器提交 HTTP 请求；服务器向客户端返回响应。响应包含关于请求的状态信息以及可能被请求的内容。</p><p>两种 HTTP 请求方法：GET 和 POST<br>在客户机和服务器之间进行请求-响应时，两种最常被用到的方法是：GET 和 POST。</p><p>GET - 从指定的资源请求数据。<br>POST - 向指定的资源提交要被处理的数据。<br>GET 提交参数一般显示在 URL 上，POST 通过表单提交不会显示在 URL 上，POST 更具隐蔽性：</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>你需要现在工程中加入Network相关内容</p><p>CMake示例：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">find_package</span>(Qt6 COMPONENTS Network REQUIRED)<br><span class="hljs-keyword">target_link_libraries</span>(ZcAnimeDanmuTool PRIVATE Qt6::Network)<br></code></pre></td></tr></table></figure><p>然后再.h中添加</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QNetworkAccessManager&gt;</span></span><br></code></pre></td></tr></table></figure><p>并且再private中声明一个manager</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">QNetworkAccessManager *m_manager;<br></code></pre></td></tr></table></figure><h1 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h1><h2 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h2><p>直接使用了loop的方法，简单粗暴地演示一下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++">m_manager = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QNetworkAccessManager</span>(<span class="hljs-keyword">this</span>); <span class="hljs-comment">//新建QNetworkAccessManager对象</span><br>QEventLoop loop; <span class="hljs-comment">//循环</span><br>QNetworkReply *reply = m_manager-&gt;<span class="hljs-built_in">get</span>(<span class="hljs-built_in">QNetworkRequest</span>(<span class="hljs-built_in">QUrl</span>(<span class="hljs-string">&quot;url&quot;</span>))); <span class="hljs-comment">//这里是请求网址</span><br><span class="hljs-built_in">connect</span>(reply, <span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">finished</span>()), &amp;loop, <span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">quit</span>())); <span class="hljs-comment">//绑定回复事件</span><br>loop.<span class="hljs-built_in">exec</span>(); <span class="hljs-comment">//循环直到有回复</span><br>QString read = reply-&gt;<span class="hljs-built_in">readAll</span>();<br>reply-&gt;<span class="hljs-built_in">deleteLater</span>(); <span class="hljs-comment">//释放内存</span><br></code></pre></td></tr></table></figure><p>最后这个read就是返回内容了，一般是json，需要继续处理</p><h2 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++">QNetworkAccessManager* naManager = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QNetworkAccessManager</span>(<span class="hljs-keyword">this</span>);<br>QNetworkRequest request;<br><span class="hljs-comment">//头设置</span><br>request.<span class="hljs-built_in">setUrl</span>(<span class="hljs-built_in">QUrl</span>(<span class="hljs-string">&quot;url&quot;</span>)); <span class="hljs-comment">//这里是请求网址</span><br>request.<span class="hljs-built_in">setHeader</span>(QNetworkRequest::ContentTypeHeader, <span class="hljs-built_in">QVariant</span>(<span class="hljs-string">&quot;application/json&quot;</span>)); <span class="hljs-comment">//这是一个设置头的示例</span><br><span class="hljs-comment">//内容设置</span><br>QJsonObject jsonObj;<br><span class="hljs-comment">/*此处需要根据情况编写json内容*/</span><br><span class="hljs-function">QJsonDocument <span class="hljs-title">jsonDoc</span><span class="hljs-params">(jsonObj)</span></span>;<br><span class="hljs-comment">//发送 POST 请求</span><br>QEventLoop loop;<br>QNetworkReply* reply = naManager-&gt;<span class="hljs-built_in">post</span>(request, jsonDoc.<span class="hljs-built_in">toJson</span>());<br><span class="hljs-built_in">connect</span>(reply, <span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">finished</span>()), &amp;loop, <span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">quit</span>()));<br>loop.<span class="hljs-built_in">exec</span>(); <span class="hljs-comment">//一样的循环</span><br>QString read;<br>read = reply-&gt;<span class="hljs-built_in">readAll</span>();<br>reply-&gt;<span class="hljs-built_in">deleteLater</span>(); <span class="hljs-comment">//记得释放内存</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Qt中ElaWidgetTools的基础使用</title>
    <link href="/2024/10/23/%E4%BD%BF%E7%94%A8ElaWidgetTools%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/10/23/%E4%BD%BF%E7%94%A8ElaWidgetTools%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>介绍一下ElaWidgetTools的基础使用方法</p><span id="more"></span><h1 id="ElaWidgetTools介绍"><a href="#ElaWidgetTools介绍" class="headerlink" title="ElaWidgetTools介绍"></a>ElaWidgetTools介绍</h1><p>基于QT-Widget开发的FluentUI风格的组件库，同时提供不限于组件的常用集成功能；目前Main分支支持QT5.12以上所有版本(Linux为QT5.15以上)，推荐版本为QT6.4.3和QT6.6.2；</p><h1 id="在项目中使用"><a href="#在项目中使用" class="headerlink" title="在项目中使用"></a>在项目中使用</h1><h2 id="构建dll"><a href="#构建dll" class="headerlink" title="构建dll"></a>构建dll</h2><p><a href="https://github.com/Liniyous/ElaWidgetTools">ElaWidgetTools</a></p><p>Clone下来并使用QtCreater打开，项目是CMaker，所以说打开的是CMakeLists.txt</p><p><img src="/img/1.png" alt="1"></p><p>选择和你项目一致的版本，使用release构建</p><p>在根目录下即可得到elawidgettools.dll和elawidgettools.lib</p><h2 id="添加到自己项目"><a href="#添加到自己项目" class="headerlink" title="添加到自己项目"></a>添加到自己项目</h2><p>在项目文件夹中创建lib文件夹和include文件夹</p><p><img src="/img/2.png" alt="2"></p><p>把elawidgettools.dll和elawidgettools.lib放到lib文件夹</p><p>把ElaWidgetTools-main\src\include中的文件放到include文件夹</p><p>接下来打开自己项目的cmakelists</p><p>首先要把include文件夹包含进来</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">include_directories</span>(<br>    <span class="hljs-keyword">include</span><br>)<br></code></pre></td></tr></table></figure><p>然后再add_executable中添加qrc</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">include</span>/ElaWidgetTools.qrc<br></code></pre></td></tr></table></figure><p>最后链接目标库，再target_link_libraries中添加</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/lib/elawidgettools.lib<br></code></pre></td></tr></table></figure><p>大功告成，这是完整的cmakelist示例仅供参考：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.16</span>)<br><br><span class="hljs-keyword">project</span>(<span class="hljs-keyword">Test</span> VERSION <span class="hljs-number">0.1</span> LANGUAGES CXX)<br><br><span class="hljs-keyword">set</span>(CMAKE_AUTOUIC <span class="hljs-keyword">ON</span>)<br><span class="hljs-keyword">set</span>(CMAKE_AUTOMOC <span class="hljs-keyword">ON</span>)<br><span class="hljs-keyword">set</span>(CMAKE_AUTORCC <span class="hljs-keyword">ON</span>)<br><br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD <span class="hljs-number">17</span>)<br><span class="hljs-keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="hljs-keyword">ON</span>)<br><br><span class="hljs-keyword">find_package</span>(Qt6 REQUIRED Widgets Multimedia MultimediaWidgets NetWork)<br><br><span class="hljs-keyword">set</span>(PROJECT_SOURCES<br>        main.cpp<br>        mainwindow.cpp<br>        mainwindow.h<br>        mainwindow.ui<br>)<br><br><span class="hljs-keyword">add_executable</span>(<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span> <span class="hljs-variable">$&#123;PROJECT_SOURCES&#125;</span><br>    <span class="hljs-keyword">include</span>/ElaWidgetTools.qrc <span class="hljs-comment">#这里添加了</span><br>    res.qrc)<br><span class="hljs-comment">#这里添加了</span><br><br><span class="hljs-keyword">include_directories</span>(<br>    <span class="hljs-keyword">include</span><br>)<br><br><span class="hljs-keyword">target_link_libraries</span>(<span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span> PRIVATE Qt6::Widgets Qt6::Multimedia Qt6::MultimediaWidgets Qt6::Network<br>    <span class="hljs-variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/lib/elawidgettools.lib<span class="hljs-comment">#这里添加了</span><br><br>)<br></code></pre></td></tr></table></figure><p>可以这样修改main.cpp来测试是否成功</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//#include &quot;mainwindow.h&quot;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ElaApplication.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ElaWindow.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">QApplication <span class="hljs-title">a</span><span class="hljs-params">(argc, argv)</span></span>;<br>    ElaApplication::<span class="hljs-built_in">getInstance</span>()-&gt;<span class="hljs-built_in">init</span>();<br>    ElaWindow w;<br>    w.<span class="hljs-built_in">show</span>();<br>    <span class="hljs-keyword">return</span> a.<span class="hljs-built_in">exec</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>如果没问题的话应该会有这个界面<br><img src="/img/3.png" alt="3"></p><h2 id="在项目中使用-1"><a href="#在项目中使用-1" class="headerlink" title="在项目中使用"></a>在项目中使用</h2><h3 id="窗口修改"><a href="#窗口修改" class="headerlink" title="窗口修改"></a>窗口修改</h3><p>.h中在添加头文件的基础上把</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MainWindow</span> : <span class="hljs-keyword">public</span> QMainWindow<br></code></pre></td></tr></table></figure><p>修改为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MainWindow</span> : <span class="hljs-keyword">public</span> ElaWidget 或者 ElaWindow<br></code></pre></td></tr></table></figure><p>即可，widget和window看自己需求</p><p>当然cpp里也要修改为Ela</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++">MainWindow::<span class="hljs-built_in">MainWindow</span>(QWidget *parent)<br>    : <span class="hljs-built_in">ElaWindow</span>(parent) <span class="hljs-comment">//此处修改</span><br>    , <span class="hljs-built_in">ui</span>(<span class="hljs-keyword">new</span> Ui::MainWindow)<br>&#123;<br>    ui-&gt;<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>之后需要在main.cpp中初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mainwindow.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ElaApplication.h&quot;</span></span><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">QApplication <span class="hljs-title">a</span><span class="hljs-params">(argc, argv)</span></span>;<br>    MainWindow w;<br>    w.<span class="hljs-built_in">show</span>();<br>    eApp-&gt;<span class="hljs-built_in">init</span>(); <span class="hljs-comment">//初始化</span><br>    <span class="hljs-keyword">return</span> a.<span class="hljs-built_in">exec</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用控件"><a href="#使用控件" class="headerlink" title="使用控件"></a>使用控件</h3><p>控件的使用除了在cpp里创建外，部分控件（有继承关系的话）还可以用界面设计中的“提升为”功能</p><p><img src="/img/4.png" alt="4"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何创建一个这样的博客</title>
    <link href="/2024/10/22/CreateAHexo/"/>
    <url>/2024/10/22/CreateAHexo/</url>
    
    <content type="html"><![CDATA[<p>介绍一下这个博客是如何创建出来的</p><span id="more"></span><h1 id="如何创建"><a href="#如何创建" class="headerlink" title="如何创建"></a>如何创建</h1><p>参考的是这样的一篇博客<br><a href="https://blog.csdn.net/yaorongke/article/details/119089190">创建教程</a></p><h1 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h1><p><a href="https://hexo.fluid-dev.com/docs/">Fluid文档</a></p><h1 id="一些快速配置"><a href="#一些快速配置" class="headerlink" title="一些快速配置"></a>一些快速配置</h1><h2 id="添加文章"><a href="#添加文章" class="headerlink" title="添加文章"></a>添加文章</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> 文章文件名<br></code></pre></td></tr></table></figure><h2 id="post和更新"><a href="#post和更新" class="headerlink" title="post和更新"></a>post和更新</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo <span class="hljs-selector-tag">g</span> -d<br></code></pre></td></tr></table></figure><h1 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h1><h2 id="配置文件不更新"><a href="#配置文件不更新" class="headerlink" title="配置文件不更新"></a>配置文件不更新</h2><p>有的时候会遇到配置文件更新了不显示，这里就需要使用命令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo <span class="hljs-selector-tag">g</span><br>hexo d<br></code></pre></td></tr></table></figure><p>来重新部署</p><h2 id="push的时候报fatal-unable-to-access"><a href="#push的时候报fatal-unable-to-access" class="headerlink" title="push的时候报fatal: unable to access"></a>push的时候报fatal: unable to access</h2><p>经典的github走错代理，使用命令来指定端口</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> https<span class="hljs-selector-class">.proxy</span> http:<span class="hljs-comment">//127.0.0.1:7897</span><br>git config <span class="hljs-attr">--global</span> http<span class="hljs-selector-class">.proxy</span> http:<span class="hljs-comment">//127.0.0.1:7897</span><br></code></pre></td></tr></table></figure><h2 id="关于网站样式的修改"><a href="#关于网站样式的修改" class="headerlink" title="关于网站样式的修改"></a>关于网站样式的修改</h2><p>样式修改需要手动删除目录下的public后再进行push</p>]]></content>
    
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
